[{"/Users/teayoung/Desktop/hh_pro/2run12jo/src/index.js":"1","/Users/teayoung/Desktop/hh_pro/2run12jo/src/reportWebVitals.js":"2","/Users/teayoung/Desktop/hh_pro/2run12jo/src/App.jsx":"3","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/config/configStore.js":"4","/Users/teayoung/Desktop/hh_pro/2run12jo/src/shared/Router.js":"5","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/modules/commentSlice.js":"6","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/modules/todosSlice.js":"7","/Users/teayoung/Desktop/hh_pro/2run12jo/src/pages/Detail.jsx":"8","/Users/teayoung/Desktop/hh_pro/2run12jo/src/pages/Main.jsx":"9","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/common/Footer.jsx":"10","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/common/Header.jsx":"11","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/comments/Comment.jsx":"12","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/DetailPage/DetailMain.jsx":"13","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/button/Button.jsx":"14","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/TodoList/TodoList.jsx":"15","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/todoForm/TodoForm.jsx":"16","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/TodoList/Todo.jsx":"17","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/DetailPage/DetailScheduleEdit.jsx":"18","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/comments/CommentWrite.jsx":"19","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/comments/CommentList.jsx":"20","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/comments/CommentViews.jsx":"21"},{"size":626,"mtime":1672192064289,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1672192064291,"results":"24","hashOfConfig":"23"},{"size":213,"mtime":1672192064289,"results":"25","hashOfConfig":"23"},{"size":268,"mtime":1672192064291,"results":"26","hashOfConfig":"23"},{"size":542,"mtime":1672192064291,"results":"27","hashOfConfig":"23"},{"size":3629,"mtime":1672285371526,"results":"28","hashOfConfig":"23"},{"size":5516,"mtime":1672286241171,"results":"29","hashOfConfig":"23"},{"size":260,"mtime":1672192064289,"results":"30","hashOfConfig":"23"},{"size":2540,"mtime":1672192064289,"results":"31","hashOfConfig":"23"},{"size":377,"mtime":1672192064290,"results":"32","hashOfConfig":"23"},{"size":936,"mtime":1672192064290,"results":"33","hashOfConfig":"23"},{"size":662,"mtime":1672322915303,"results":"34","hashOfConfig":"23"},{"size":11238,"mtime":1672192064289,"results":"35","hashOfConfig":"23"},{"size":758,"mtime":1672192064290,"results":"36","hashOfConfig":"23"},{"size":2069,"mtime":1672322926813,"results":"37","hashOfConfig":"23"},{"size":11162,"mtime":1672192064290,"results":"38","hashOfConfig":"23"},{"size":1976,"mtime":1672192064290,"results":"39","hashOfConfig":"23"},{"size":2139,"mtime":1672192064289,"results":"40","hashOfConfig":"23"},{"size":4778,"mtime":1672296011490,"results":"41","hashOfConfig":"23"},{"size":3847,"mtime":1672280289043,"results":"42","hashOfConfig":"23"},{"size":804,"mtime":1672296506787,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"120u44q",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"47"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"47"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"47"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"47"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"47"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/teayoung/Desktop/hh_pro/2run12jo/src/index.js",[],[],[],"/Users/teayoung/Desktop/hh_pro/2run12jo/src/reportWebVitals.js",[],[],"/Users/teayoung/Desktop/hh_pro/2run12jo/src/App.jsx",[],[],"/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/config/configStore.js",[],[],"/Users/teayoung/Desktop/hh_pro/2run12jo/src/shared/Router.js",[],[],"/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/modules/commentSlice.js",[],[],"/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/modules/todosSlice.js",[],[],"/Users/teayoung/Desktop/hh_pro/2run12jo/src/pages/Detail.jsx",["113"],[],"import React from 'react';\nimport Comment from '../redux/components/comments/Comment';\nimport DetailMain from '../redux/components/DetailPage/DetailMain';\n\nfunction Detail() {\n  return (\n    <div>\n      <DetailMain />\n    </div>\n  );\n}\n\nexport default Detail;\n","/Users/teayoung/Desktop/hh_pro/2run12jo/src/pages/Main.jsx",["114","115"],[],"import React, { useEffect, useState } from 'react';\nimport Button from '../redux/components/button/Button';\nimport TodoList from '../redux/components/TodoList/TodoList';\nimport TodoForm from '../redux/components/todoForm/TodoForm';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\n\nfunction Main() {\n  const [modalSwitch, setModalSwitch] = useState(false);\n\n  const openModalAddScheduleButton = () => {\n    setModalSwitch(!modalSwitch);\n  };\n\n  return (\n    <StyleContentsWrapper>\n      <StyleSubTitle>\n        <h3>\n          <span>자유롭게</span> 팀프로젝트를 만들어보세요.\n        </h3>\n        <p>여러상태로 프로젝트를 관리 할수 있습니다.</p>\n      </StyleSubTitle>\n\n      <StyleMainWrap>\n        <StyleTodoWrap className=\"todolist-wrapper\">\n          <TodoList title=\"시작전\" className=\"before\" />\n          <TodoList title=\"시작예정\" className=\"planning\" />\n          <TodoList title=\"진행중\" className=\"ongoing\" />\n          <TodoList title=\"완료\" className=\"completion\" />\n        </StyleTodoWrap>\n        <div className=\"button-wrapper\">\n          <Button ClickHandler={openModalAddScheduleButton} radius=\"4\">\n            + 일정추가\n          </Button>\n        </div>\n      </StyleMainWrap>\n\n      {modalSwitch && (\n        <TodoForm setModalSwitch={setModalSwitch} modalSwitch={modalSwitch} />\n      )}\n    </StyleContentsWrapper>\n  );\n}\n\nexport default Main;\n\nconst StyleContentsWrapper = styled.div`\n  padding: 0 2em;\n`;\n\nconst StyleSubTitle = styled.div`\n  border-bottom: 1px solid #ddd;\n  padding: 1em 0 2em 0em;\n  margin-bottom: 1em;\n\n  > h3 {\n    font-size: 24px;\n    font-weight: 600;\n\n    > span {\n      color: #3187f1;\n      font-weight: 900;\n      font-size: 32px;\n    }\n  }\n  > p {\n    margin-top: 1em;\n  }\n`;\n\nconst StyleMainWrap = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n  width: 1600px;\n  margin: 0 auto;\n\n  @media (max-width: 1600px) {\n    width: 100%;\n    flex-direction: column;\n    align-items: flex-end;\n  }\n\n  .button-wrapper {\n    display: flex;\n    justify-content: flex-end;\n  }\n`;\n\nconst StyleTodoWrap = styled.div`\n  display: flex;\n  gap: 24px;\n  margin-top: 2em;\n  width: 1400px;\n  height: 400px;\n\n  @media (max-width: 1600px) {\n    width: 100%;\n    order: 2;\n  }\n\n  @media (max-width: 1100px) {\n    width: 100%;\n    padding: 2em;\n    box-sizing: border-box;\n    overflow-x: scroll;\n    border: 1px solid #e6e6e6;\n  }\n  @media (max-width: 600px) {\n    height: auto;\n  }\n`;\n","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/common/Footer.jsx",[],[],"/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/common/Header.jsx",[],[],"/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/comments/Comment.jsx",[],[],"/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/DetailPage/DetailMain.jsx",["116","117"],[],"import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { __getTodos, __modifyEdittedTodo } from '../../modules/todosSlice';\nimport DetailScheduleEdit from '../DetailPage/DetailScheduleEdit';\nimport Comment from '../comments/Comment';\nimport Button from '../button/Button';\n\nfunction DetailMain() {\n  const dispatch = useDispatch();\n\n  const navigation = useNavigate();\n  // useNavigate로 전달한 props(todo의 id)\n  const location = useLocation();\n  const todoId = location.pathname.split('/')[1];\n\n  // 상세페이지 제목을 받아오려면 todos를 일단 가져오자.\n  const { todos } = useSelector((state) => state.allTodos);\n\n  //. todoId와 같은 id를 가진 todo를 filter를 통해 변수에 할당하자.\n  const sameIdTodos = todos.filter((item) => item.id === todoId)[0];\n\n  const todosSchedule = sameIdTodos && sameIdTodos.schedule;\n  const todosStartDate = sameIdTodos && sameIdTodos.startDate;\n  const todosDoneDate = sameIdTodos && sameIdTodos.doneDate;\n  const todosTitle = sameIdTodos && sameIdTodos.title;\n  const todosContent = sameIdTodos && sameIdTodos.content;\n  const todosUserId = sameIdTodos && sameIdTodos.userId;\n\n  // 진행 상태 수정 스위치\n  const [buttonSwitch, setButtonSwitch] = useState(false);\n  const openScheduleEditButton = () => {\n    setButtonSwitch((prev) => !buttonSwitch);\n  };\n\n  const [editValue, setEditValue] = useState({\n    editContent: todosContent,\n    editTitle: todosTitle,\n    editDoneDate: todosDoneDate,\n    editUserId: todosUserId,\n    editSchedule: todosSchedule,\n  });\n\n  const { editContent, editTitle, editDoneDate, editUserId, editSchedule } =\n    editValue;\n\n  const onSubmitEdittedTodo = (e) => {\n    e.preventDefault();\n\n    const passwordForModifying = window.prompt(\n      '수정을 위해 비밀 번호를 입력해 주세요.'\n    );\n\n    if (passwordForModifying === sameIdTodos.userPw) {\n      dispatch(\n        __modifyEdittedTodo({\n          id: todoId,\n          userId: editUserId,\n          title: editTitle,\n          content: editContent,\n          doneDate: editDoneDate,\n          schedule: editSchedule,\n        })\n      );\n\n      setEditValue({\n        ...editValue,\n        editContent: editContent,\n        editTitle: editTitle,\n        editDoneDate: editDoneDate,\n        editUserId: editUserId,\n        editSchedule: editSchedule,\n      });\n\n      window.confirm('수정이 완료되었습니다.');\n    } else {\n      alert('비밀번호가 틀렸습니다.');\n      setEditValue({\n        ...editValue,\n        editContent: todosContent,\n        editTitle: todosTitle,\n        editDoneDate: todosDoneDate,\n        editUserId: todosUserId,\n        editSchedule: todosSchedule,\n      });\n    }\n  };\n\n  useEffect(() => {\n    dispatch(__getTodos());\n  }, [dispatch]);\n\n  return (\n    <StyledDetailMain>\n      <form onSubmit={onSubmitEdittedTodo}>\n        <ButtonWrapper>\n          <Button\n            backgroundColor=\"#484848\"\n            radius=\"4\"\n            ClickHandler={() => {\n              navigation('/');\n            }}\n          >\n            뒤로가기\n          </Button>\n          <Button radius=\"4\">수정하기</Button>\n        </ButtonWrapper>\n\n        {/* 제목 */}\n        <StyleContent className=\"title\">\n          <input\n            placeholder={todosTitle}\n            value={editTitle}\n            onChange={(e) => {\n              const { value } = e.target;\n              setEditValue({\n                ...editValue,\n                editTitle: value,\n              });\n            }}\n          />\n        </StyleContent>\n\n        {/* 담당자 */}\n        <StyleContent>\n          <ConentTitle>담당자 </ConentTitle>\n          <input\n            placeholder={todosUserId}\n            value={editUserId}\n            onChange={(e) => {\n              const { value } = e.target;\n              setEditValue({\n                ...editValue,\n                editUserId: value,\n              });\n            }}\n          />\n        </StyleContent>\n\n        {/* 진행상태 */}\n        <StyleContent>\n          <ConentTitle>진행 상태 </ConentTitle>\n\n          <StyleSchedule>\n            <p className=\"schedule-title\" onClick={openScheduleEditButton}>\n              <span>{editSchedule ? editSchedule : todosSchedule}</span>\n            </p>\n\n            {buttonSwitch && (\n              <StyleRadio className=\"check-box\">\n                <input\n                  onChange={(e) => {\n                    const { value } = e.target;\n                    setEditValue({\n                      ...editValue,\n                      editSchedule: value,\n                    });\n                  }}\n                  type=\"radio\"\n                  id=\"schedule-list0\"\n                  name=\"schedule-list\"\n                  value={'시작전'}\n                  defaultChecked\n                />\n                <label htmlFor=\"schedule-list0\" className=\"start\">\n                  <span className=\"pointer\" />\n                  시작전\n                </label>\n\n                <input\n                  onChange={(e) => {\n                    const { value } = e.target;\n                    setEditValue({\n                      ...editValue,\n                      editSchedule: value,\n                    });\n                  }}\n                  type=\"radio\"\n                  id=\"schedule-list1\"\n                  name=\"schedule-list\"\n                  value={'시작예정'}\n                />\n                <label htmlFor=\"schedule-list1\" className=\"planning\">\n                  <span className=\"pointer\" />\n                  시작예정\n                </label>\n\n                <input\n                  onChange={(e) => {\n                    const { value } = e.target;\n                    setEditValue({\n                      ...editValue,\n                      editSchedule: value,\n                    });\n                  }}\n                  type=\"radio\"\n                  id=\"schedule-list2\"\n                  name=\"schedule-list\"\n                  value={'진행중'}\n                />\n                <label htmlFor=\"schedule-list2\" className=\"ongoing\">\n                  <span className=\"pointer\" />\n                  진행중\n                </label>\n\n                <input\n                  onChange={(e) => {\n                    const { value } = e.target;\n                    setEditValue({\n                      ...editValue,\n                      editSchedule: value,\n                    });\n                  }}\n                  type=\"radio\"\n                  id=\"schedule-list3\"\n                  name=\"schedule-list\"\n                  value={'완료'}\n                />\n                <label htmlFor=\"schedule-list3\" className=\"completion\">\n                  <span className=\"pointer\" />완 료\n                </label>\n              </StyleRadio>\n            )}\n          </StyleSchedule>\n        </StyleContent>\n\n        {/* 마감일시 */}\n        <StyleContent>\n          <ConentTitle>마감 일시 </ConentTitle>\n          <input\n            placeholder={todosDoneDate}\n            value={editDoneDate}\n            onChange={(e) => {\n              const { value } = e.target;\n              setEditValue({\n                ...editValue,\n                editDoneDate: value,\n              });\n            }}\n            type=\"date\"\n          />\n        </StyleContent>\n        {/* 내용 */}\n        <StyleText>\n          <ConentTitle className=\"content-wrap\">내용</ConentTitle>\n          <textarea\n            placeholder={todosContent}\n            value={editContent}\n            onChange={(e) => {\n              const { value } = e.target;\n              setEditValue({\n                ...editValue,\n                editContent: value,\n              });\n            }}\n          />\n        </StyleText>\n      </form>\n      <Comment />\n    </StyledDetailMain>\n  );\n}\n\nexport default DetailMain;\n\n//CSS\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 2em;\n`;\n\nconst StyledDetailMain = styled.div`\n  width: 1200px;\n  margin: 0 auto;\n\n  @media (max-width: 1200px) {\n    width: 100%;\n    padding: 24px;\n    box-sizing: border-box;\n  }\n\n  .title {\n    margin-bottom: 1em;\n\n    > input {\n      border: none;\n      font-size: 24px;\n      color: #000;\n      outline: none;\n      text-align: left;\n\n      ::placeholder {\n        font-size: 24px;\n        color: #000;\n      }\n    }\n  }\n`;\n\nconst StyleContent = styled.div`\n  display: flex;\n  /* width: 80%; */\n  margin-bottom: 0.5em;\n\n  @media (max-width: 600px) {\n    flex-direction: column;\n    width: 100%;\n    margin-bottom: 1em;\n  }\n\n  .title {\n    display: flex;\n  }\n\n  > input {\n    display: block;\n    flex: 1;\n    border: none;\n    outline: none;\n    font-size: 16px;\n    text-align: right;\n    color: #000;\n\n    ::placeholder {\n      color: #000;\n    }\n  }\n`;\n\nconst ConentTitle = styled.div`\n  font-weight: 900;\n  flex: 1;\n\n  @media (max-width: 600px) {\n    margin-bottom: 1em;\n  }\n`;\n\nconst StyleText = styled.div`\n  margin: 1.5em 0;\n  border-top: 1px solid #ddd;\n  padding: 2em 0;\n\n  .content-wrap {\n    font-size: 24px;\n  }\n\n  > textarea {\n    width: 100%;\n    border: none;\n    margin-top: 1em;\n    min-height: 200px;\n    border-radius: 4px;\n    resize: none;\n    outline: none;\n    font-size: 16px;\n    color: #000;\n\n    ::placeholder {\n      font-size: 16px;\n      color: #000;\n    }\n  }\n`;\nconst StyleRadio = styled.div`\n  padding: 16px 0 16px;\n  cursor: pointer;\n\n  input[type='radio'] {\n    display: none;\n  }\n  .pointer {\n    display: inline-block;\n    margin-right: 4px;\n    border-radius: 100%;\n    width: 8px;\n    height: 8px;\n    background-color: red;\n  }\n\n  input[type='radio']:checked + label {\n    border: 2px solid #333;\n\n    &.start {\n      border-color: #ff5e5e;\n    }\n    &.planning {\n      border-color: #ff9900;\n    }\n    &.ongoing {\n      border-color: #00f846;\n    }\n    &.completion {\n      border-color: #343434;\n    }\n  }\n\n  input[type='radio'] + label {\n    border: 2px solid transparent;\n    box-sizing: border-box;\n    display: inline-block;\n    cursor: pointer;\n    padding: 0.4em 1.4em;\n    margin-right: 8px;\n    border-radius: 50px;\n    font-weight: bold;\n    font-size: 13px;\n\n    @media (max-width: 600px) {\n      margin-bottom: 1em;\n    }\n\n    &.start {\n      background-color: #ffdfdf;\n      .pointer {\n        background-color: #ff9999;\n      }\n    }\n    &.planning {\n      background-color: #ffdeae;\n      .pointer {\n        background-color: orange;\n      }\n    }\n    &.ongoing {\n      background-color: #a3f8bb;\n      .pointer {\n        background-color: #27ae60;\n      }\n    }\n    &.completion {\n      background-color: #d4d4d4;\n      .pointer {\n        background-color: #828282;\n      }\n    }\n  }\n`;\n\nconst StyleSchedule = styled.div`\n  background-color: #ededed;\n  border-radius: 4px;\n  padding: 16px 16px 0;\n  width: 60%;\n  cursor: pointer;\n\n  @media (max-width: 600px) {\n    width: 100%;\n  }\n\n  .schedule-title {\n    padding: 0 4px 8px;\n    display: flex;\n    justify-content: flex-end;\n\n    > span {\n      font-weight: 900;\n      color: #3187f1;\n    }\n  }\n`;\n","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/button/Button.jsx",[],[],"/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/TodoList/TodoList.jsx",["118"],[],"/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/todoForm/TodoForm.jsx",["119","120","121"],[],"import { React, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport styled from 'styled-components';\nimport Button from '../button/Button';\nimport { useDispatch } from 'react-redux';\nimport { __postTodos } from '../../modules/todosSlice';\n\nconst TodoForm = ({ setModalSwitch, modalSwitch }) => {\n  const dispatch = useDispatch();\n\n  // 일정추가 form input\n  const [todoValue, setTodoValue] = useState({\n    id: uuidv4(),\n    schedule: '시작전',\n    title: '',\n    content: '',\n    userId: '',\n    userPw: '',\n    startDate: new Date().toLocaleDateString(),\n    doneDate: '',\n  });\n  const { title, content, userId, userPw, startDate, doneDate, schedule } =\n    todoValue;\n\n  //input value 작성안했을때 경고 메세지\n  const [inputTxt, setInputTxt] = useState({\n    titleTxt: '',\n    contentTxt: '',\n    userIdTxt: '',\n    userPwTxt: '',\n    doneDateTxt: '',\n  });\n\n  const { titleTxt, contentTxt, userIdTxt, userPwTxt, doneDateTxt } = inputTxt;\n\n  // 일정 추가하기 이벤트\n  const addTodoClick = (event) => {\n    // 새로고침 방지\n    event.preventDefault();\n\n    // 일정제목,내용, 작성자 빈칸 제거\n    const titleTrim = title.trim();\n    const contentTrim = content.trim();\n    const userIdTrim = userId.trim();\n\n    // 입력값 없을 때 작성X 알림\n    if (!title || !content || !userId || !userPw || !doneDate) {\n      setInputTxt({\n        ...inputTxt,\n        titleTxt: '일정 제목 을 작성해주세요',\n        contentTxt: '일정 내용 을 작성해주세요',\n        doneDateTxt: '마감 일자 를 작성해주세요',\n        userIdTxt: '담당자 를 작성해주세요',\n        userPwTxt: '비밀번호 를 작성해주세요',\n      });\n      return;\n    }\n\n    // 새로추가 하는 일정\n    const newTodo = {\n      id: uuidv4(),\n      title,\n      content,\n      userId,\n      userPw,\n      startDate,\n      doneDate,\n      schedule,\n    };\n\n    // 리덕스 일정추가\n    dispatch(__postTodos(newTodo));\n\n    //추가 후 입력된 value 빈값으로 수정\n    setTodoValue({\n      ...todoValue,\n      schedule: [0],\n      title: '',\n      content: '',\n      userId: '',\n      userPw: '',\n      startDate: '',\n      doneDate: '',\n    });\n    setModalSwitch(!modalSwitch);\n  };\n\n  return (\n    <PopupWrapper>\n      <StyleTodoForm>\n        <h3 className=\"form-title\">일정추가</h3>\n        <form onSubmit={addTodoClick}>\n          <StyleInputWrap>\n            <StyleRadio className=\"check-box\">\n              <input\n                onChange={(e) => {\n                  const { value } = e.target;\n                  setTodoValue({\n                    ...todoValue,\n                    schedule: value,\n                  });\n                }}\n                type=\"radio\"\n                id=\"schedule-list0\"\n                name=\"schedule-list\"\n                value={'시작전'}\n                defaultChecked\n              />\n              <label htmlFor=\"schedule-list0\" className=\"start\">\n                <span className=\"pointer\" />\n                시작전\n              </label>\n              <input\n                onChange={(e) => {\n                  const { value } = e.target;\n                  setTodoValue({\n                    ...todoValue,\n                    schedule: value,\n                  });\n                }}\n                type=\"radio\"\n                id=\"schedule-list1\"\n                name=\"schedule-list\"\n                value={'시작예정'}\n              />\n              <label htmlFor=\"schedule-list1\" className=\"planning\">\n                <span className=\"pointer\" />\n                시작예정\n              </label>\n              <input\n                onChange={(e) => {\n                  const { value } = e.target;\n                  setTodoValue({\n                    ...todoValue,\n                    schedule: value,\n                  });\n                }}\n                type=\"radio\"\n                id=\"schedule-list2\"\n                name=\"schedule-list\"\n                value={'진행중'}\n              />\n              <label htmlFor=\"schedule-list2\" className=\"ongoing\">\n                <span className=\"pointer\" />\n                진행중\n              </label>\n              <input\n                onChange={(e) => {\n                  const { value } = e.target;\n                  setTodoValue({\n                    ...todoValue,\n                    schedule: value,\n                  });\n                }}\n                type=\"radio\"\n                id=\"schedule-list3\"\n                name=\"schedule-list\"\n                value={'완료'}\n              />\n              <label htmlFor=\"schedule-list3\" className=\"completion\">\n                <span className=\"pointer\" />완 료\n              </label>\n            </StyleRadio>\n          </StyleInputWrap>\n\n          <StyleInputWrap>\n            <label htmlFor=\"new-title\">일정제목</label>\n            <input\n              type=\"text\"\n              id=\"new-title\"\n              name=\"new-title\"\n              onChange={(e) => {\n                const { value } = e.target;\n                setTodoValue({\n                  ...todoValue,\n                  title: value,\n                });\n              }}\n              value={title}\n              autoFocus={true}\n              placeholder=\"일정제목을 적어주세요.\"\n            />\n            <StyleInputError>{title ? '' : titleTxt}</StyleInputError>\n          </StyleInputWrap>\n\n          <StyleInputWrap>\n            <label htmlFor=\"new-content\">일정내용 </label>\n            <textarea\n              cols=\"300px\"\n              rows=\"100px\"\n              id=\"new-content\"\n              name=\"new-content\"\n              onChange={(e) => {\n                const { value } = e.target;\n                setTodoValue({\n                  ...todoValue,\n                  content: value,\n                });\n              }}\n              value={content}\n              autoFocus={false}\n              placeholder=\"일정내용을 적어주세요.\"\n            />\n            <StyleInputError>{content ? '' : contentTxt}</StyleInputError>\n          </StyleInputWrap>\n\n          <StyleInputWrap>\n            <label htmlFor=\"done-date\">마감일자</label>\n            <input\n              onChange={(e) => {\n                const { value } = e.target;\n                console.log(value);\n                setTodoValue({\n                  ...todoValue,\n                  doneDate: value,\n                });\n              }}\n              type=\"date\"\n              id=\"done-date\"\n              name=\"done-date\"\n              min=\"2022.01.01\"\n              max=\"2023.03.15\"\n              value={doneDate}\n            />\n            <StyleInputError>{doneDate ? '' : doneDateTxt}</StyleInputError>\n          </StyleInputWrap>\n\n          <StyleFlex>\n            <StyleInputWrap>\n              <label htmlFor=\"new-userid\">담당자</label>\n              <input\n                type=\"text\"\n                id=\"new-userid\"\n                name=\"new-userid\"\n                onChange={(e) => {\n                  const { value } = e.target;\n                  setTodoValue({\n                    ...todoValue,\n                    userId: value,\n                  });\n                }}\n                value={userId}\n                autoFocus={false}\n                placeholder=\"작성자를 적어주세요.\"\n              />\n              <StyleInputError>{userId ? '' : userIdTxt}</StyleInputError>\n            </StyleInputWrap>\n\n            <StyleInputWrap>\n              <label htmlFor=\"new-userpw\">비밀번호</label>\n              <input\n                type=\"password\"\n                id=\"new-userpw\"\n                name=\"new-userpw\"\n                onChange={(e) => {\n                  const { value } = e.target;\n                  setTodoValue({\n                    ...todoValue,\n                    userPw: value,\n                  });\n                }}\n                value={userPw}\n                autoFocus={false}\n                placeholder=\"암호를 적어주세요.\"\n              />\n              <StyleInputError>{userPw ? '' : userPwTxt}</StyleInputError>\n            </StyleInputWrap>\n          </StyleFlex>\n\n          <StyleButton>\n            <Button\n              radius=\"4\"\n              backgroundColor=\"#878787\"\n              sidePadding=\"28\"\n              upDownPadding=\"10\"\n              ClickHandler={() => {\n                setModalSwitch(!modalSwitch);\n              }}\n            >\n              취소\n            </Button>\n            <Button radius=\"4\">일정 추가</Button>\n          </StyleButton>\n        </form>\n      </StyleTodoForm>\n    </PopupWrapper>\n  );\n};\nexport default TodoForm;\n\n\n\nconst StyleFlex = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  \n`;\nconst PopupWrapper = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  padding: 3em 0;\n  background-color: rgba(0, 0, 0, 0.5);\n`;\n\nconst StyleTodoForm = styled.div`\n  width: 500px;\n  padding: 24px;\n  background-color: #fff;\n  border-radius: 8px;\n\n  .form-title {\n    font-size: 24px;\n    font-weight: 600;\n    margin-bottom: 16px;\n  }\n`;\n\nconst StyleInputWrap = styled.div`\n  width: 100%;\n  margin-bottom: 16px;\n\n  > label {\n    display: block;\n    font-weight: 600;\n    margin-bottom: 8px;\n  }\n\n  > input,\n  textarea {\n    width: 100%;\n    box-sizing: border-box;\n    border-color: #ddd;\n    border-radius: 4px;\n    padding: 1em;\n    outline: none;\n  }\n\n  > input {\n    height: 30px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n\n    [type='radio'] {\n      cursor: pointer;\n    }\n  }\n  > textarea {\n    height: 120px;\n    resize: none;\n  }\n`;\n\nconst StyleRadio = styled.div`\n  input[type='radio'] {\n    display: none;\n  }\n  .pointer {\n    display: inline-block;\n    margin-right: 4px;\n    border-radius: 100%;\n    width: 8px;\n    height: 8px;\n    background-color: red;\n  }\n\n  input[type='radio']:checked + label {\n    border: 2px solid #333;\n\n    &.start {\n      border-color: #ff5e5e;\n    }\n    &.planning {\n      border-color: #ff9900;\n    }\n    &.ongoing {\n      border-color: #00f846;\n    }\n    &.completion {\n      border-color: #343434;\n    }\n  }\n\n  input[type='radio'] + label {\n    border: 2px solid transparent;\n    box-sizing: border-box;\n    display: inline-block;\n    cursor: pointer;\n    padding: 0.4em 1.4em;\n    margin-right: 8px;\n    border-radius: 50px;\n    font-weight: bold;\n    font-size: 13px;\n\n    &.start {\n      background-color: #ffdfdf;\n      .pointer {\n        background-color: #ff9999;\n      }\n    }\n    &.planning {\n      background-color: #ffdeae;\n      .pointer {\n        background-color: orange;\n      }\n    }\n    &.ongoing {\n      background-color: #a3f8bb;\n      .pointer {\n        background-color: #27ae60;\n      }\n    }\n    &.completion {\n      background-color: #d4d4d4;\n      .pointer {\n        background-color: #828282;\n      }\n    }\n  }\n`;\n\nconst StyleButton = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  gap: 8px;\n`;\n\nconst StyleInputError = styled.p`\n  color: red;\n  font-size: 13px;\n  margin-top: 4px;\n`;\n","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/TodoList/Todo.jsx",[],[],"/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/DetailPage/DetailScheduleEdit.jsx",[],[],"/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/comments/CommentWrite.jsx",["122"],[],"/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/comments/CommentList.jsx",["123"],[],"import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport Button from '../button/Button';\nimport { __deleteComment, __modifyComment } from '../../modules/commentSlice';\n\nfunction CommentList({ item }) {\n  const [commentModify, setCommnetModify] = useState(false);\n  const [modifyValue, setModifyValue] = useState('');\n  const dispatch = useDispatch();\n\n  //코멘트 수정\n  const commentModifyButton = () => {\n    //commentModify false 일때\n    if (!commentModify) {\n      const ModifyCommnet = window.prompt(\n        '수정을 위해서 비밀번호를 입력 해 주세요.',\n        '비밀번호를 입력해주세요.'\n      );\n      if (ModifyCommnet === item.userPw) {\n        setCommnetModify(!commentModify);\n      } else {\n        window.confirm('비밀번호가 틀립니다. 다시 입력 해 주세요.');\n      }\n    } else {\n      //변경할 내용을 객체로 받아와야함.\n      dispatch(__modifyComment({ id: item.id, comment: modifyValue }));\n      setCommnetModify(!commentModify);\n    }\n  };\n\n  //코멘트 삭제\n  const commentDeleteButton = () => {\n    const deleteCommnet = window.prompt(\n      '삭제를 위해서 비밀번호를 입력 해 주세요.',\n      '비밀번호를 입력해주세요.'\n    );\n\n    //비밀번호가 같을 때\n    if (deleteCommnet === item.userPw) {\n      window.confirm('정말 삭제하겠습니까?');\n      dispatch(__deleteComment(item.id));\n    } else {\n      window.confirm('비밀번호가 틀립니다. 다시 입력 해 주세요.');\n    }\n  };\n\n  return (\n    <>\n      <StyleComments>\n        <p>\n          {item?.comment}\n          <span className=\"comment-date\">{item?.date}</span>\n        </p>\n        <div className=\"comment-modify\">\n          <span className=\"comment-user\">{item?.userId}</span>\n          {commentModify && (\n            <input\n              maxLength=\"40\"\n              type=\"text\"\n              vale={modifyValue}\n              placeholder=\"댓글을 입력해 주세요.\"\n              onChange={(e) => {\n                setModifyValue(e.target.value);\n              }}\n            />\n          )}\n          <StyleButtonWrap>\n            <Button\n              backgroundColor=\"#2F80ED\"\n              radius=\"100\"\n              ClickHandler={commentModifyButton}\n            >\n              {commentModify ? '완료하기' : '수정하기'}\n            </Button>\n            <StyleMarginRight />\n\n            <Button\n              backgroundColor=\"#8d8d8d\"\n              radius=\"100\"\n              ClickHandler={commentDeleteButton}\n            >\n              삭제하기\n            </Button>\n          </StyleButtonWrap>\n        </div>\n      </StyleComments>\n    </>\n  );\n}\n\nexport default CommentList;\n\nconst StyleComments = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 8px 24px;\n\n  @media (max-width: 600px) {\n    flex-direction: column;\n  }\n\n  .comment-date {\n    color: #535353;\n    font-size: 11px;\n    margin-left: 16px;\n  }\n\n  > p {\n    @media (max-width: 1160px) {\n      width: calc(100% / 2);\n      line-height: 1.3;\n    }\n    @media (max-width: 600px) {\n      width: 100%;\n    }\n  }\n\n  .comment-modify {\n    display: flex;\n    align-items: center;\n\n    @media (max-width: 600px) {\n      width: 100%;\n      justify-content: flex-end;\n    }\n\n    > span {\n      margin-right: 16px;\n    }\n\n    .comment-user {\n      font-weight: 700;\n    }\n\n    > input {\n      min-width: 160px;\n      height: 34px;\n      padding: 0 8px;\n      margin-right: 8px;\n      border: none;\n      border-bottom: 1px solid #2f80ed;\n\n      ::placeholder {\n        color: #2f80ed;\n      }\n      :focus {\n        outline: none;\n      }\n    }\n  }\n`;\n\nconst StyleMarginRight = styled.span``;\nconst StyleButtonWrap = styled.div``;\n","/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/components/comments/CommentViews.jsx",[],[],{"ruleId":"124","severity":1,"message":"125","line":2,"column":8,"nodeType":"126","messageId":"127","endLine":2,"endColumn":15},{"ruleId":"124","severity":1,"message":"128","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":26},{"ruleId":"124","severity":1,"message":"129","line":6,"column":10,"nodeType":"126","messageId":"127","endLine":6,"endColumn":21},{"ruleId":"124","severity":1,"message":"130","line":6,"column":8,"nodeType":"126","messageId":"127","endLine":6,"endColumn":26},{"ruleId":"124","severity":1,"message":"131","line":25,"column":9,"nodeType":"126","messageId":"127","endLine":25,"endColumn":23},{"ruleId":"124","severity":1,"message":"132","line":3,"column":22,"nodeType":"126","messageId":"127","endLine":3,"endColumn":33},{"ruleId":"124","severity":1,"message":"133","line":42,"column":11,"nodeType":"126","messageId":"127","endLine":42,"endColumn":20},{"ruleId":"124","severity":1,"message":"134","line":43,"column":11,"nodeType":"126","messageId":"127","endLine":43,"endColumn":22},{"ruleId":"124","severity":1,"message":"135","line":44,"column":11,"nodeType":"126","messageId":"127","endLine":44,"endColumn":21},{"ruleId":"124","severity":1,"message":"128","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":26},{"ruleId":"124","severity":1,"message":"128","line":1,"column":27,"nodeType":"126","messageId":"127","endLine":1,"endColumn":36},"no-unused-vars","'Comment' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useSelector' is defined but never used.","'DetailScheduleEdit' is defined but never used.","'todosStartDate' is assigned a value but never used.","'__postTodos' is defined but never used.","'titleTrim' is assigned a value but never used.","'contentTrim' is assigned a value but never used.","'userIdTrim' is assigned a value but never used."]