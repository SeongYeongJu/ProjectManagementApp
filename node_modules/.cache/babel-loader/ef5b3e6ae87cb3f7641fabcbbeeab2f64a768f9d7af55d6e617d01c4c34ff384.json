{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n//initialState\nconst initialState = {\n  commentLists: [{\n    comment: '3',\n    userId: '2',\n    userPw: '2',\n    date: '2022. 12. 24.',\n    id: 1\n  }],\n  isLoading: false,\n  error: null\n};\n\n//Thunk 함수\nexport const __getComment = createAsyncThunk('getComment', async (payload, thunkAPI) => {\n  try {\n    const data = await axios.get('http://localhost:3001/commentLists');\n    console.log('data', data);\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    console.log(error);\n    return thunkAPI.rejectWithValue(error);\n  }\n});\n\n//추가\nconst commentOnsubmitHandler = commentList => {\n  axios.post('http://localhost:3001/commentLists', commentList);\n  if (!comment || !userId || !userPw) {\n    setInpuTxt({\n      ...inputTxt,\n      commentTxt: '댓글 을 입력해주세요.',\n      userIdTxt: '이름 을 입력해주세요.',\n      userPwTxt: '비밀번호 를 입력해주세요.'\n    });\n    return;\n  }\n  // setCommentLists([...commentLists, commentList]);\n  setCommentList({\n    ...commentList,\n    comment: '',\n    userId: '',\n    userPw: ''\n  });\n};\nconst commentSlice = createSlice({\n  name: 'commentList',\n  initialState,\n  reducers: {\n    addComment: (state, action) => {\n      return [...state, action.payload];\n    },\n    deleteComment: (state, action) => {\n      return state.filter(c => c.id !== action.payload);\n    },\n    modifyComment: (state, action) => {\n      console.log('action', action.payload);\n      state.forEach(c => {\n        console.log('state', state);\n        if (c.id === action.payload.id) {\n          c.comment = action.payload.comment;\n          return;\n          //   return { ...c, comment: action.payload.comment };\n        }\n      });\n\n      return state;\n    }\n  },\n  extraReducers: {\n    [__getComment.pending]: state => {\n      state.isLoading = true;\n    },\n    [__getComment.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.commentLists = action.payload;\n      console.log('fulfilled 상태', state, action);\n    },\n    [__getComment.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  getComment\n} = commentSlice.actions;\nexport default commentSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","initialState","commentLists","comment","userId","userPw","date","id","isLoading","error","__getComment","payload","thunkAPI","data","get","console","log","fulfillWithValue","rejectWithValue","commentOnsubmitHandler","commentList","post","setInpuTxt","inputTxt","commentTxt","userIdTxt","userPwTxt","setCommentList","commentSlice","name","reducers","addComment","state","action","deleteComment","filter","c","modifyComment","forEach","extraReducers","pending","fulfilled","rejected","getComment","actions","reducer"],"sources":["/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/modules/commentSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n//initialState\nconst initialState = {\n  commentLists: [\n    {\n      comment: '3',\n      userId: '2',\n      userPw: '2',\n      date: '2022. 12. 24.',\n      id: 1,\n    },\n  ],\n  isLoading: false,\n  error: null,\n};\n\n//Thunk 함수\nexport const __getComment = createAsyncThunk(\n  'getComment',\n  async (payload, thunkAPI) => {\n    try {\n      const data = await axios.get('http://localhost:3001/commentLists');\n      console.log('data', data);\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      console.log(error);\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\n  //추가\n  const commentOnsubmitHandler = (commentList) => {\n    axios.post('http://localhost:3001/commentLists', commentList);\n\n    if (!comment || !userId || !userPw) {\n      setInpuTxt({\n        ...inputTxt,\n        commentTxt: '댓글 을 입력해주세요.',\n        userIdTxt: '이름 을 입력해주세요.',\n        userPwTxt: '비밀번호 를 입력해주세요.',\n      });\n      return;\n    }\n    // setCommentLists([...commentLists, commentList]);\n    setCommentList({ ...commentList, comment: '', userId: '', userPw: '' });\n  };\n\n  \n\nconst commentSlice = createSlice({\n  name: 'commentList',\n  initialState,\n  reducers: {\n    addComment: (state, action) => {\n      return [...state, action.payload];\n    },\n    deleteComment: (state, action) => {\n      return state.filter((c) => c.id !== action.payload);\n    },\n    modifyComment: (state, action) => {\n      console.log('action', action.payload);\n\n      state.forEach((c) => {\n        console.log('state', state);\n        if (c.id === action.payload.id) {\n          c.comment = action.payload.comment;\n          return;\n          //   return { ...c, comment: action.payload.comment };\n        }\n      });\n      return state;\n    },\n  },\n  extraReducers: {\n    [__getComment.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [__getComment.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.commentLists = action.payload;\n      console.log('fulfilled 상태', state, action);\n    },\n    [__getComment.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n  },\n});\n\nexport const { getComment } = commentSlice.actions;\nexport default commentSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}