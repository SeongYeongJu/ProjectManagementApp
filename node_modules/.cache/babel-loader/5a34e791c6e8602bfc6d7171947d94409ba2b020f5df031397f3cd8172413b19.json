{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// 관리해야 할 state\n//. todos = [{id, title, content, 등등},{}] 에 관한 state\n// 위에 todos만 관리해줘도 안에 있는 데이터 접근이 다 가능함.\n// 위 todos를 기반으로 reducer 다 만들면 됨.\n\nconst initialState = {\n  todos: [],\n  isLoading: false,\n  error: null,\n  isAdded: false // AddScheduleInput 컴포넌트에서 todo 추가 시 리렌더링을 위해 썼음\n};\n// 123\n// 서버와 데이터 통신\n// GET\nexport const __getTodos = createAsyncThunk(\"getTodos\", async (payload, thunkAPI) => {\n  try {\n    const data = await axios.get(\"http://localhost:3001/todos\");\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\n\n// POST\nexport const __postTodos = createAsyncThunk(\"todos/postTodos\", async (payload, thunkAPI) => {\n  try {\n    await axios.post(\"http://localhost:3001/todos\", payload);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\n\n//\n\nconst todosSlice = createSlice({\n  name: \"todos\",\n  initialState,\n  reducers: {\n    addTodo: (state, action) => {\n      state.todos = [...state.todos, action.payload]; // payload는 객체\n    },\n\n    deleteTitle: (state, action) => {\n      state.todos.filter(item => item.id !== action.payload); // payload는 해당 객체의 id\n    }\n  },\n\n  extraReducers: {\n    [__getTodos.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n\n    [__getTodos.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.todos = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n\n    [__getTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n\n    [__postTodos.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n\n    [__postTodos.fulfilled]: state => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.isAdded = !state.isAdded; //. Todolist 컴포넌트에서 post요청이 끝났을 때, isAdded 값이 변경되면 __getTodos()가 실행된다.\n    },\n\n    [__postTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    }\n  }\n});\n\n// 액션크리에이터는 컴포넌트에서 사용하기 위해 export 하고\nexport const {\n  addTodo\n} = todosSlice.actions;\n// reducer 는 configStore에 등록하기 위해 export default 합니다.\nexport default todosSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","todos","isLoading","error","isAdded","__getTodos","payload","thunkAPI","data","get","fulfillWithValue","rejectWithValue","__postTodos","post","todosSlice","name","reducers","addTodo","state","action","deleteTitle","filter","item","id","extraReducers","pending","fulfilled","rejected","actions","reducer"],"sources":["/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/modules/todosSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// 관리해야 할 state\n//. todos = [{id, title, content, 등등},{}] 에 관한 state\n// 위에 todos만 관리해줘도 안에 있는 데이터 접근이 다 가능함.\n// 위 todos를 기반으로 reducer 다 만들면 됨.\n\nconst initialState = {\n  todos: [],\n  isLoading: false,\n  error: null,\n  isAdded: false, // AddScheduleInput 컴포넌트에서 todo 추가 시 리렌더링을 위해 썼음\n};\n// 123\n// 서버와 데이터 통신\n// GET\nexport const __getTodos = createAsyncThunk(\n  \"getTodos\",\n  async (payload, thunkAPI) => {\n    try {\n      const data = await axios.get(\"http://localhost:3001/todos\");\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\n// POST\nexport const __postTodos = createAsyncThunk(\n  \"todos/postTodos\",\n  async (payload, thunkAPI) => {\n    try {\n      await axios.post(\"http://localhost:3001/todos\", payload);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\n//\n\nconst todosSlice = createSlice({\n  name: \"todos\",\n  initialState,\n  reducers: {\n    addTodo: (state, action) => {\n      state.todos = [...state.todos, action.payload]; // payload는 객체\n    },\n\n    deleteTitle: (state, action) => {\n      state.todos.filter((item) => item.id !== action.payload); // payload는 해당 객체의 id\n    },\n  },\n  extraReducers: {\n    [__getTodos.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getTodos.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.todos = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__getTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n\n\n    [__postTodos.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__postTodos.fulfilled]: (state) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.isAdded = !state.isAdded; //. Todolist 컴포넌트에서 post요청이 끝났을 때, isAdded 값이 변경되면 __getTodos()가 실행된다.\n    },\n    [__postTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n  },\n});\n\n// 액션크리에이터는 컴포넌트에서 사용하기 위해 export 하고\nexport const { addTodo } = todosSlice.actions;\n// reducer 는 configStore에 등록하기 위해 export default 합니다.\nexport default todosSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EACXC,OAAO,EAAE,KAAK,CAAE;AAClB,CAAC;AACD;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGP,gBAAgB,CACxC,UAAU,EACV,OAAOQ,OAAO,EAAEC,QAAQ,KAAK;EAC3B,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,6BAA6B,CAAC;IAC3D,OAAOF,QAAQ,CAACG,gBAAgB,CAACF,IAAI,CAACA,IAAI,CAAC;EAC7C,CAAC,CAAC,OAAOL,KAAK,EAAE;IACd,OAAOI,QAAQ,CAACI,eAAe,CAACR,KAAK,CAAC;EACxC;AACF,CAAC,CACF;;AAED;AACA,OAAO,MAAMS,WAAW,GAAGd,gBAAgB,CACzC,iBAAiB,EACjB,OAAOQ,OAAO,EAAEC,QAAQ,KAAK;EAC3B,IAAI;IACF,MAAMR,KAAK,CAACc,IAAI,CAAC,6BAA6B,EAAEP,OAAO,CAAC;EAC1D,CAAC,CAAC,OAAOH,KAAK,EAAE;IACd,OAAOI,QAAQ,CAACI,eAAe,CAACR,KAAK,CAAC;EACxC;AACF,CAAC,CACF;;AAED;;AAEA,MAAMW,UAAU,GAAGjB,WAAW,CAAC;EAC7BkB,IAAI,EAAE,OAAO;EACbf,YAAY;EACZgB,QAAQ,EAAE;IACRC,OAAO,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1BD,KAAK,CAACjB,KAAK,GAAG,CAAC,GAAGiB,KAAK,CAACjB,KAAK,EAAEkB,MAAM,CAACb,OAAO,CAAC,CAAC,CAAC;IAClD,CAAC;;IAEDc,WAAW,EAAE,CAACF,KAAK,EAAEC,MAAM,KAAK;MAC9BD,KAAK,CAACjB,KAAK,CAACoB,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACb,OAAO,CAAC,CAAC,CAAC;IAC5D;EACF,CAAC;;EACDkB,aAAa,EAAE;IACb,CAACnB,UAAU,CAACoB,OAAO,GAAIP,KAAK,IAAK;MAC/BA,KAAK,CAAChB,SAAS,GAAG,IAAI,CAAC,CAAC;IAC1B,CAAC;;IACD,CAACG,UAAU,CAACqB,SAAS,GAAG,CAACR,KAAK,EAAEC,MAAM,KAAK;MACzCD,KAAK,CAAChB,SAAS,GAAG,KAAK,CAAC,CAAC;MACzBgB,KAAK,CAACjB,KAAK,GAAGkB,MAAM,CAACb,OAAO,CAAC,CAAC;IAChC,CAAC;;IACD,CAACD,UAAU,CAACsB,QAAQ,GAAG,CAACT,KAAK,EAAEC,MAAM,KAAK;MACxCD,KAAK,CAAChB,SAAS,GAAG,KAAK,CAAC,CAAC;MACzBgB,KAAK,CAACf,KAAK,GAAGgB,MAAM,CAACb,OAAO,CAAC,CAAC;IAChC,CAAC;;IAGD,CAACM,WAAW,CAACa,OAAO,GAAIP,KAAK,IAAK;MAChCA,KAAK,CAAChB,SAAS,GAAG,IAAI,CAAC,CAAC;IAC1B,CAAC;;IACD,CAACU,WAAW,CAACc,SAAS,GAAIR,KAAK,IAAK;MAClCA,KAAK,CAAChB,SAAS,GAAG,KAAK,CAAC,CAAC;MACzBgB,KAAK,CAACd,OAAO,GAAG,CAACc,KAAK,CAACd,OAAO,CAAC,CAAC;IAClC,CAAC;;IACD,CAACQ,WAAW,CAACe,QAAQ,GAAG,CAACT,KAAK,EAAEC,MAAM,KAAK;MACzCD,KAAK,CAAChB,SAAS,GAAG,KAAK,CAAC,CAAC;MACzBgB,KAAK,CAACf,KAAK,GAAGgB,MAAM,CAACb,OAAO,CAAC,CAAC;IAChC;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEW;AAAQ,CAAC,GAAGH,UAAU,CAACc,OAAO;AAC7C;AACA,eAAed,UAAU,CAACe,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}