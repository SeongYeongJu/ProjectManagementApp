{"ast":null,"code":"import { createSlice, createAsyncThunk, current } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// 관리해야 할 state\n//. todos = [{id, title, content, 등등},{}] 에 관한 state\n// 위에 todos만 관리해줘도 안에 있는 데이터 접근이 다 가능함.\n// 위 todos를 기반으로 reducer 다 만들면 됨.\n\nconst initialState = {\n  todos: [],\n  isLoading: false,\n  error: null\n};\n// 123\n// 서버와 데이터 통신\n// GET\nexport const __getTodos = createAsyncThunk(\"getTodos\", async (payload, thunkAPI) => {\n  try {\n    const data = await axios.get(\"http://localhost:3001/todos\");\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\n\n// POST\nexport const __postTodos = createAsyncThunk(\"addTodos\", async (payload, thunkAPI) => {\n  try {\n    await axios.post(\"http://localhost:3001/todos\", payload);\n    return thunkAPI.fulfillWithValue(payload);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const __modifySchedule = createAsyncThunk(\"modifyschedule\", async (payload, thunkAPI) => {\n  try {\n    await axios.patch(`http://localhost:3001/commentLists/${payload.id}`, {\n      schedule: payload.schedule\n    });\n    return thunkAPI.fulfillWithValue(payload);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\n\n//삭제\nexport const __deleteTodos = createAsyncThunk(\"deleteTodos\", async (payload, thunkAPI) => {\n  try {\n    await axios.delete(`http://localhost:3001/todos/${payload}`);\n    return thunkAPI.fulfillWithValue(payload);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nconst todosSlice = createSlice({\n  name: \"todos\",\n  initialState,\n  extraReducers: {\n    //getToto\n    [__getTodos.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n\n    [__getTodos.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.todos = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n\n    [__getTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n\n    //addTodos\n    [__postTodos.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n\n    [__postTodos.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.todos = [...state.todos, action.payload]; // 실제 post 동작을 수행합니다.\n    },\n\n    [__postTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n\n    //modifyschedule\n    [__modifySchedule.pending]: state => {\n      state.isLoading = true;\n    },\n    [__modifySchedule.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.todos = current(state).todos.map(item => {\n        if (item.id === action.payload.id) {\n          return {\n            ...item,\n            schedule: action.payload.schedule\n          };\n        } else {\n          return item;\n        }\n      });\n    },\n    [__modifySchedule.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    //deleteTodos\n    [__deleteTodos.pending]: state => {\n      state.isLoading = true;\n    },\n    [__deleteTodos.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.todos = state.todos.filter(comment => comment.id !== action.payload);\n    },\n    [__deleteTodos.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    }\n  }\n});\n\n// 액션크리에이터는 컴포넌트에서 사용하기 위해 export 하고\nexport const {\n  addTodos,\n  deleteTodos\n} = todosSlice.actions;\n// reducer 는 configStore에 등록하기 위해 export default 합니다.\nexport default todosSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","current","axios","initialState","todos","isLoading","error","__getTodos","payload","thunkAPI","data","get","fulfillWithValue","rejectWithValue","__postTodos","post","__modifySchedule","patch","id","schedule","__deleteTodos","delete","todosSlice","name","extraReducers","pending","state","fulfilled","action","rejected","map","item","filter","comment","addTodos","deleteTodos","actions","reducer"],"sources":["/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/modules/todosSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk, current } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// 관리해야 할 state\n//. todos = [{id, title, content, 등등},{}] 에 관한 state\n// 위에 todos만 관리해줘도 안에 있는 데이터 접근이 다 가능함.\n// 위 todos를 기반으로 reducer 다 만들면 됨.\n\nconst initialState = {\n  todos: [],\n  isLoading: false,\n  error: null,\n};\n// 123\n// 서버와 데이터 통신\n// GET\nexport const __getTodos = createAsyncThunk(\n  \"getTodos\",\n  async (payload, thunkAPI) => {\n    try {\n      const data = await axios.get(\"http://localhost:3001/todos\");\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\n// POST\nexport const __postTodos = createAsyncThunk(\n  \"addTodos\",\n  async (payload, thunkAPI) => {\n    try {\n      await axios.post(\"http://localhost:3001/todos\", payload);\n      return thunkAPI.fulfillWithValue(payload);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nexport const __modifySchedule = createAsyncThunk(\n  \"modifyschedule\",\n  async (payload, thunkAPI) => {\n    try {\n      await axios.patch(`http://localhost:3001/commentLists/${payload.id}`, {\n        schedule: payload.schedule,\n      });\n      return thunkAPI.fulfillWithValue(payload);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\n//삭제\nexport const __deleteTodos = createAsyncThunk(\n  \"deleteTodos\",\n  async (payload, thunkAPI) => {\n    try {\n      await axios.delete(`http://localhost:3001/todos/${payload}`);\n      return thunkAPI.fulfillWithValue(payload);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nconst todosSlice = createSlice({\n  name: \"todos\",\n  initialState,\n\n  extraReducers: {\n    //getToto\n    [__getTodos.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getTodos.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.todos = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__getTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n\n    //addTodos\n    [__postTodos.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__postTodos.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.todos = [...state.todos, action.payload]; // 실제 post 동작을 수행합니다.\n    },\n    [__postTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n    //modifyschedule\n    [__modifySchedule.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [__modifySchedule.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.todos = current(state).todos.map((item) => {\n        if (item.id === action.payload.id) {\n          return { ...item, schedule: action.payload.schedule };\n        } else {\n          return item;\n        }\n      });\n    },\n    [__modifySchedule.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n\n    //deleteTodos\n    [__deleteTodos.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [__deleteTodos.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.todos = state.todos.filter(\n        (comment) => comment.id !== action.payload\n      );\n    },\n    [__deleteTodos.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n  },\n});\n\n// 액션크리에이터는 컴포넌트에서 사용하기 위해 export 하고\nexport const { addTodos, deleteTodos } = todosSlice.actions;\n// reducer 는 configStore에 등록하기 위해 export default 합니다.\nexport default todosSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}