{"ast":null,"code":"import { createSlice, createAsyncThunk, current } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  todos: [],\n  isLoading: false,\n  error: null\n};\n// 123\n// 서버와 데이터 통신\n// GET\nexport const __getTodos = createAsyncThunk(\"getTodos\", async (payload, thunkAPI) => {\n  try {\n    const data = await axios.get(\"http://localhost:3001/todos\");\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\n\n// POST\nexport const __postTodos = createAsyncThunk(\"addTodos\", async (payload, thunkAPI) => {\n  try {\n    await axios.post(\"http://localhost:3001/todos\", payload);\n    return thunkAPI.fulfillWithValue(payload);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const __modifySchedule = createAsyncThunk(\"modifyschedule\", async (payload, thunkAPI) => {\n  console.log(payload);\n  try {\n    await axios.patch(`http://localhost:3001/todos/${payload.id}`, {\n      schedule: payload.schedule\n    });\n    return thunkAPI.fulfillWithValue(payload);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const __modifyEdittedTodo = createAsyncThunk(\"modifyEdittedTodo\", async (payload, thunkAPI) => {\n  try {\n    await axios.patch(`http://localhost:3001/todos/${payload.id}`, {\n      userId: payload.userId,\n      title: payload.title,\n      content: payload.content,\n      doneDate: payload.doneDate\n    });\n    return thunkAPI.fulfillWithValue(payload);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\n\n//삭제\nexport const __deleteTodos = createAsyncThunk(\"deleteTodos\", async (payload, thunkAPI) => {\n  try {\n    await axios.delete(`http://localhost:3001/todos/${payload}`);\n    return thunkAPI.fulfillWithValue(payload);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nconst todosSlice = createSlice({\n  name: \"todos\",\n  initialState,\n  extraReducers: {\n    //getToto\n    [__getTodos.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n\n    [__getTodos.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.todos = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n\n    [__getTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n\n    //addTodos\n    [__postTodos.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n\n    [__postTodos.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.todos = [...state.todos, action.payload]; // 실제 post 동작을 수행합니다.\n    },\n\n    [__postTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n\n    // modifyschedule\n    [__modifySchedule.pending]: state => {\n      state.isLoading = true;\n    },\n    [__modifySchedule.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.todos = current(state).todos.map(item => {\n        if (item.id === action.payload.id) {\n          return {\n            ...item,\n            schedule: action.payload.schedule\n          };\n        } else {\n          return item;\n        }\n      });\n    },\n    [__modifySchedule.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    //modifyTodo\n    [__modifyEdittedTodo.pending]: state => {\n      state.isLoading = true;\n    },\n    [__modifyEdittedTodo.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.todos = current(state).todos.map(item => {\n        if (item.id === action.payload.id) {\n          return {\n            ...item,\n            title: action.payload.title,\n            content: action.payload.content,\n            doneDate: action.payload.doneDate\n          };\n        } else {\n          return item;\n        }\n      });\n    },\n    [__modifyEdittedTodo.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    //deleteTodos\n    [__deleteTodos.pending]: state => {\n      state.isLoading = true;\n    },\n    [__deleteTodos.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.todos = state.todos.filter(comment => comment.id !== action.payload);\n    },\n    [__deleteTodos.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    }\n  }\n});\n\n// 액션크리에이터는 컴포넌트에서 사용하기 위해 export 하고\nexport const {\n  addTodos,\n  deleteTodos\n} = todosSlice.actions;\n// reducer 는 configStore에 등록하기 위해 export default 합니다.\nexport default todosSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","current","axios","initialState","todos","isLoading","error","__getTodos","payload","thunkAPI","data","get","fulfillWithValue","rejectWithValue","__postTodos","post","__modifySchedule","console","log","patch","id","schedule","__modifyEdittedTodo","userId","title","content","doneDate","__deleteTodos","delete","todosSlice","name","extraReducers","pending","state","fulfilled","action","rejected","map","item","filter","comment","addTodos","deleteTodos","actions","reducer"],"sources":["/Users/teayoung/Desktop/hh_pro/2run12jo/src/redux/modules/todosSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk, current } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst initialState = {\n  todos: [],\n  isLoading: false,\n  error: null,\n};\n// 123\n// 서버와 데이터 통신\n// GET\nexport const __getTodos = createAsyncThunk(\n  \"getTodos\",\n  async (payload, thunkAPI) => {\n    try {\n      const data = await axios.get(\"http://localhost:3001/todos\");\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\n// POST\nexport const __postTodos = createAsyncThunk(\n  \"addTodos\",\n  async (payload, thunkAPI) => {\n    try {\n      await axios.post(\"http://localhost:3001/todos\", payload);\n      return thunkAPI.fulfillWithValue(payload);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nexport const __modifySchedule = createAsyncThunk(\n  \"modifyschedule\",\n  async (payload, thunkAPI) => {\n    console.log(payload);\n    try {\n      await axios.patch(`http://localhost:3001/todos/${payload.id}`, {\n        schedule: payload.schedule,\n      });\n      return thunkAPI.fulfillWithValue(payload);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nexport const __modifyEdittedTodo = createAsyncThunk(\n  \"modifyEdittedTodo\",\n  async (payload, thunkAPI) => {\n    try {\n      await axios.patch(`http://localhost:3001/todos/${payload.id}`, {\n        userId: payload.userId,\n        title: payload.title,\n        content: payload.content,\n        doneDate: payload.doneDate,\n      });\n      return thunkAPI.fulfillWithValue(payload);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\n//삭제\nexport const __deleteTodos = createAsyncThunk(\n  \"deleteTodos\",\n  async (payload, thunkAPI) => {\n    try {\n      await axios.delete(`http://localhost:3001/todos/${payload}`);\n      return thunkAPI.fulfillWithValue(payload);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nconst todosSlice = createSlice({\n  name: \"todos\",\n  initialState,\n\n  extraReducers: {\n    //getToto\n    [__getTodos.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getTodos.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.todos = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__getTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n\n    //addTodos\n    [__postTodos.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__postTodos.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.todos = [...state.todos, action.payload]; // 실제 post 동작을 수행합니다.\n    },\n    [__postTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n\n    // modifyschedule\n    [__modifySchedule.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [__modifySchedule.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.todos = current(state).todos.map((item) => {\n        if (item.id === action.payload.id) {\n          return { ...item, schedule: action.payload.schedule };\n        } else {\n          return item;\n        }\n      });\n    },\n    [__modifySchedule.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n\n    //modifyTodo\n    [__modifyEdittedTodo.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [__modifyEdittedTodo.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.todos = current(state).todos.map((item) => {\n        if (item.id === action.payload.id) {\n          return {\n            ...item,\n            title: action.payload.title,\n            content: action.payload.content,\n            doneDate: action.payload.doneDate,\n          };\n        } else {\n          return item;\n        }\n      });\n    },\n    [__modifyEdittedTodo.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n\n    //deleteTodos\n    [__deleteTodos.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [__deleteTodos.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.todos = state.todos.filter(\n        (comment) => comment.id !== action.payload\n      );\n    },\n    [__deleteTodos.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n  },\n});\n\n// 액션크리에이터는 컴포넌트에서 사용하기 위해 export 하고\nexport const { addTodos, deleteTodos } = todosSlice.actions;\n// reducer 는 configStore에 등록하기 위해 export default 합니다.\nexport default todosSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,EAAEC,OAAO,QAAQ,kBAAkB;AACzE,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE;AACT,CAAC;AACD;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGP,gBAAgB,CACxC,UAAU,EACV,OAAOQ,OAAO,EAAEC,QAAQ,KAAK;EAC3B,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,6BAA6B,CAAC;IAC3D,OAAOF,QAAQ,CAACG,gBAAgB,CAACF,IAAI,CAACA,IAAI,CAAC;EAC7C,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACd,OAAOG,QAAQ,CAACI,eAAe,CAACP,KAAK,CAAC;EACxC;AACF,CAAC,CACF;;AAED;AACA,OAAO,MAAMQ,WAAW,GAAGd,gBAAgB,CACzC,UAAU,EACV,OAAOQ,OAAO,EAAEC,QAAQ,KAAK;EAC3B,IAAI;IACF,MAAMP,KAAK,CAACa,IAAI,CAAC,6BAA6B,EAAEP,OAAO,CAAC;IACxD,OAAOC,QAAQ,CAACG,gBAAgB,CAACJ,OAAO,CAAC;EAC3C,CAAC,CAAC,OAAOF,KAAK,EAAE;IACd,OAAOG,QAAQ,CAACI,eAAe,CAACP,KAAK,CAAC;EACxC;AACF,CAAC,CACF;AAED,OAAO,MAAMU,gBAAgB,GAAGhB,gBAAgB,CAC9C,gBAAgB,EAChB,OAAOQ,OAAO,EAAEC,QAAQ,KAAK;EAC3BQ,OAAO,CAACC,GAAG,CAACV,OAAO,CAAC;EACpB,IAAI;IACF,MAAMN,KAAK,CAACiB,KAAK,CAAE,+BAA8BX,OAAO,CAACY,EAAG,EAAC,EAAE;MAC7DC,QAAQ,EAAEb,OAAO,CAACa;IACpB,CAAC,CAAC;IACF,OAAOZ,QAAQ,CAACG,gBAAgB,CAACJ,OAAO,CAAC;EAC3C,CAAC,CAAC,OAAOF,KAAK,EAAE;IACd,OAAOG,QAAQ,CAACI,eAAe,CAACP,KAAK,CAAC;EACxC;AACF,CAAC,CACF;AAED,OAAO,MAAMgB,mBAAmB,GAAGtB,gBAAgB,CACjD,mBAAmB,EACnB,OAAOQ,OAAO,EAAEC,QAAQ,KAAK;EAC3B,IAAI;IACF,MAAMP,KAAK,CAACiB,KAAK,CAAE,+BAA8BX,OAAO,CAACY,EAAG,EAAC,EAAE;MAC7DG,MAAM,EAAEf,OAAO,CAACe,MAAM;MACtBC,KAAK,EAAEhB,OAAO,CAACgB,KAAK;MACpBC,OAAO,EAAEjB,OAAO,CAACiB,OAAO;MACxBC,QAAQ,EAAElB,OAAO,CAACkB;IACpB,CAAC,CAAC;IACF,OAAOjB,QAAQ,CAACG,gBAAgB,CAACJ,OAAO,CAAC;EAC3C,CAAC,CAAC,OAAOF,KAAK,EAAE;IACd,OAAOG,QAAQ,CAACI,eAAe,CAACP,KAAK,CAAC;EACxC;AACF,CAAC,CACF;;AAED;AACA,OAAO,MAAMqB,aAAa,GAAG3B,gBAAgB,CAC3C,aAAa,EACb,OAAOQ,OAAO,EAAEC,QAAQ,KAAK;EAC3B,IAAI;IACF,MAAMP,KAAK,CAAC0B,MAAM,CAAE,+BAA8BpB,OAAQ,EAAC,CAAC;IAC5D,OAAOC,QAAQ,CAACG,gBAAgB,CAACJ,OAAO,CAAC;EAC3C,CAAC,CAAC,OAAOF,KAAK,EAAE;IACd,OAAOG,QAAQ,CAACI,eAAe,CAACP,KAAK,CAAC;EACxC;AACF,CAAC,CACF;AAED,MAAMuB,UAAU,GAAG9B,WAAW,CAAC;EAC7B+B,IAAI,EAAE,OAAO;EACb3B,YAAY;EAEZ4B,aAAa,EAAE;IACb;IACA,CAACxB,UAAU,CAACyB,OAAO,GAAIC,KAAK,IAAK;MAC/BA,KAAK,CAAC5B,SAAS,GAAG,IAAI,CAAC,CAAC;IAC1B,CAAC;;IACD,CAACE,UAAU,CAAC2B,SAAS,GAAG,CAACD,KAAK,EAAEE,MAAM,KAAK;MACzCF,KAAK,CAAC5B,SAAS,GAAG,KAAK,CAAC,CAAC;MACzB4B,KAAK,CAAC7B,KAAK,GAAG+B,MAAM,CAAC3B,OAAO,CAAC,CAAC;IAChC,CAAC;;IACD,CAACD,UAAU,CAAC6B,QAAQ,GAAG,CAACH,KAAK,EAAEE,MAAM,KAAK;MACxCF,KAAK,CAAC5B,SAAS,GAAG,KAAK,CAAC,CAAC;MACzB4B,KAAK,CAAC3B,KAAK,GAAG6B,MAAM,CAAC3B,OAAO,CAAC,CAAC;IAChC,CAAC;;IAED;IACA,CAACM,WAAW,CAACkB,OAAO,GAAIC,KAAK,IAAK;MAChCA,KAAK,CAAC5B,SAAS,GAAG,IAAI,CAAC,CAAC;IAC1B,CAAC;;IACD,CAACS,WAAW,CAACoB,SAAS,GAAG,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC1CF,KAAK,CAAC5B,SAAS,GAAG,KAAK,CAAC,CAAC;MACzB4B,KAAK,CAAC7B,KAAK,GAAG,CAAC,GAAG6B,KAAK,CAAC7B,KAAK,EAAE+B,MAAM,CAAC3B,OAAO,CAAC,CAAC,CAAC;IAClD,CAAC;;IACD,CAACM,WAAW,CAACsB,QAAQ,GAAG,CAACH,KAAK,EAAEE,MAAM,KAAK;MACzCF,KAAK,CAAC5B,SAAS,GAAG,KAAK,CAAC,CAAC;MACzB4B,KAAK,CAAC3B,KAAK,GAAG6B,MAAM,CAAC3B,OAAO,CAAC,CAAC;IAChC,CAAC;;IAED;IACA,CAACQ,gBAAgB,CAACgB,OAAO,GAAIC,KAAK,IAAK;MACrCA,KAAK,CAAC5B,SAAS,GAAG,IAAI;IACxB,CAAC;IACD,CAACW,gBAAgB,CAACkB,SAAS,GAAG,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAAC5B,SAAS,GAAG,KAAK;MACvB4B,KAAK,CAAC7B,KAAK,GAAGH,OAAO,CAACgC,KAAK,CAAC,CAAC7B,KAAK,CAACiC,GAAG,CAAEC,IAAI,IAAK;QAC/C,IAAIA,IAAI,CAAClB,EAAE,KAAKe,MAAM,CAAC3B,OAAO,CAACY,EAAE,EAAE;UACjC,OAAO;YAAE,GAAGkB,IAAI;YAAEjB,QAAQ,EAAEc,MAAM,CAAC3B,OAAO,CAACa;UAAS,CAAC;QACvD,CAAC,MAAM;UACL,OAAOiB,IAAI;QACb;MACF,CAAC,CAAC;IACJ,CAAC;IACD,CAACtB,gBAAgB,CAACoB,QAAQ,GAAG,CAACH,KAAK,EAAEE,MAAM,KAAK;MAC9CF,KAAK,CAAC5B,SAAS,GAAG,KAAK;MACvB4B,KAAK,CAAC3B,KAAK,GAAG6B,MAAM,CAAC3B,OAAO;IAC9B,CAAC;IAED;IACA,CAACc,mBAAmB,CAACU,OAAO,GAAIC,KAAK,IAAK;MACxCA,KAAK,CAAC5B,SAAS,GAAG,IAAI;IACxB,CAAC;IACD,CAACiB,mBAAmB,CAACY,SAAS,GAAG,CAACD,KAAK,EAAEE,MAAM,KAAK;MAClDF,KAAK,CAAC5B,SAAS,GAAG,KAAK;MACvB4B,KAAK,CAAC7B,KAAK,GAAGH,OAAO,CAACgC,KAAK,CAAC,CAAC7B,KAAK,CAACiC,GAAG,CAAEC,IAAI,IAAK;QAC/C,IAAIA,IAAI,CAAClB,EAAE,KAAKe,MAAM,CAAC3B,OAAO,CAACY,EAAE,EAAE;UACjC,OAAO;YACL,GAAGkB,IAAI;YACPd,KAAK,EAAEW,MAAM,CAAC3B,OAAO,CAACgB,KAAK;YAC3BC,OAAO,EAAEU,MAAM,CAAC3B,OAAO,CAACiB,OAAO;YAC/BC,QAAQ,EAAES,MAAM,CAAC3B,OAAO,CAACkB;UAC3B,CAAC;QACH,CAAC,MAAM;UACL,OAAOY,IAAI;QACb;MACF,CAAC,CAAC;IACJ,CAAC;IACD,CAAChB,mBAAmB,CAACc,QAAQ,GAAG,CAACH,KAAK,EAAEE,MAAM,KAAK;MACjDF,KAAK,CAAC5B,SAAS,GAAG,KAAK;MACvB4B,KAAK,CAAC3B,KAAK,GAAG6B,MAAM,CAAC3B,OAAO;IAC9B,CAAC;IAED;IACA,CAACmB,aAAa,CAACK,OAAO,GAAIC,KAAK,IAAK;MAClCA,KAAK,CAAC5B,SAAS,GAAG,IAAI;IACxB,CAAC;IACD,CAACsB,aAAa,CAACO,SAAS,GAAG,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC5CF,KAAK,CAAC5B,SAAS,GAAG,KAAK;MACvB4B,KAAK,CAAC7B,KAAK,GAAG6B,KAAK,CAAC7B,KAAK,CAACmC,MAAM,CAC7BC,OAAO,IAAKA,OAAO,CAACpB,EAAE,KAAKe,MAAM,CAAC3B,OAAO,CAC3C;IACH,CAAC;IACD,CAACmB,aAAa,CAACS,QAAQ,GAAG,CAACH,KAAK,EAAEE,MAAM,KAAK;MAC3CF,KAAK,CAAC5B,SAAS,GAAG,KAAK;MACvB4B,KAAK,CAAC3B,KAAK,GAAG6B,MAAM,CAAC3B,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEiC,QAAQ;EAAEC;AAAY,CAAC,GAAGb,UAAU,CAACc,OAAO;AAC3D;AACA,eAAed,UAAU,CAACe,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}